name: Test
on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    name: ${{ matrix.os }} ${{ matrix.python }} ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # NOTE manylinux1 has gcc 4.8, with no "is_trivially_copyable": 
          # use manylinux2010
          # - { os: "ubuntu-latest", python: "3.6", container: quay.io/pypa/manylinux2010_x86_64 }
          # - { os: "ubuntu-latest", python: "3.7", container: quay.io/pypa/manylinux2010_x86_64 }
          # - { os: "ubuntu-latest", python: "3.8", container: quay.io/pypa/manylinux2010_x86_64 }
          - { os: "ubuntu-latest", python: "3.9", container: quay.io/pypa/manylinux2010_x86_64 }
          
          # - { os: "macos-latest", python: "3.6" }
          # - { os: "macos-latest", python: "3.7" }
          # - { os: "macos-latest", python: "3.8" }
          - { os: "macos-latest", python: "3.9" }
          
          # - { os: "windows-latest", python: "3.6" }
          # - { os: "windows-latest", python: "3.7" }
          # - { os: "windows-latest", python: "3.8" }
          - { os: "windows-latest", python: "3.9" }
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.9"
    steps:
      # NOTE manylinux2010 does not have a working nodejs. Use git and curl
      # instead of actions
      - name: Checkout latest revision
        run: git clone https://github.com/lamyj/sycomore.git .
      - name: Built-in Python version
        run: python -V
      - name: Build wheel
        run: python .ci/wheels/wheel.py ${{ matrix.python }}
      - name: Archive wheels
        env:
          UPLOAD_TOKEN: ${{ secrets.UPLOAD_TOKEN }}
          UPLOAD_URL: ${{ secrets.UPLOAD_URL }}
        shell: 'python {0}'
        run: |
          import base64
          import glob
          import os
          import re
          import sys
          
          # print(os.environ)
          token, url = [os.environ[x] for x in ("UPLOAD_TOKEN", "UPLOAD_URL")]
          _, host, path = re.match(r"(.+?)://([^/]+)(.*)", url).groups()
          
          if sys.version_info < (3, 0):
              from httplib import HTTPSConnection
          else:
              from http.client import HTTPSConnection
          
          try:
              auth = base64.b64encode(token)
          except TypeError:
              auth = base64.b64encode(token.encode()).decode()
          
          for wheel in glob.glob("dist/*whl"):
              print(wheel)
              data = open(wheel, "rb").read()
              connection = HTTPSConnection(host)
              connection.request(
                  "PUT", os.path.join(path, os.path.basename(wheel)), data,
                  {"Authorization": "Basic "+auth})
              response = connection.getresponse()
              print(response.status, response.reason)
              print(response.read())
              connection.close()
